<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingbei Li&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jingbei.li/"/>
  <updated>2016-12-23T15:58:52.316Z</updated>
  <id>http://jingbei.li/</id>
  
  <author>
    <name>Jingbei Li</name>
    <email>i@jingbei.li</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迁移至hexo</title>
    <link href="http://jingbei.li/2016/09/18/%E8%BF%81%E7%A7%BB%E8%87%B3hexo/"/>
    <id>http://jingbei.li/2016/09/18/迁移至hexo/</id>
    <published>2016-09-18T19:05:06.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>如题，blog由jekyll迁移至hexo</p>
<p>使用travis.ci进行编译和发布，所以并不需要额外的服务器托管。</p>
<p>使用起来和github pages的jekyll感觉差不多，不过theme还是默认的。。是时候慢慢折腾了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，blog由jekyll迁移至hexo&lt;/p&gt;
&lt;p&gt;使用travis.ci进行编译和发布，所以并不需要额外的服务器托管。&lt;/p&gt;
&lt;p&gt;使用起来和github pages的jekyll感觉差不多，不过theme还是默认的。。是时候慢慢折腾了&lt;/p&gt;

    
    </summary>
    
    
      <category term="logs" scheme="http://jingbei.li/tags/logs/"/>
    
      <category term="hexo" scheme="http://jingbei.li/tags/hexo/"/>
    
      <category term="jekyll" scheme="http://jingbei.li/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>用raspberry pi做一个android机器人</title>
    <link href="http://jingbei.li/2016/01/03/raspberry-pi-android-robot/"/>
    <id>http://jingbei.li/2016/01/03/raspberry-pi-android-robot/</id>
    <published>2016-01-03T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>呼！终于从deadline里面爬出来一会儿让我有时间把这个之前开的坑填了。。</p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>怎么想起来做这个的呢。。一开始是我的师兄的《人工智能基础理论选讲》课，说是要做大作业，做啥都行，软硬都能报销。<br>然后就引起我兴趣，为啥不借此机会好好地做(mai)开(mai)发(mai)呢。。<br><a id="more"></a></p>
<p>下一个问题就是做什么，第一反应，要有实用性。扫地机好了！可是听说别的组也要做扫地机，算了。。</p>
<p>后来想地上跑的不行，咱们就来天上飞的吧！搞一个智能无人机好了。正看着大四轴呢，老师架不住了。。说尽量别过1k。。</p>
<p>得得得，慢慢想吧，这时候我从知乎上看到了这么个东西</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/zhihu-raspberrypi.png" alt="zhihu-raspberrypi"></p>
<p>其实没啥意思，我就狂笑了6个小时就不笑了。。。这不关键。。先做一个交作业吧。。</p>
<h3 id="The-Money-Box"><a href="#The-Money-Box" class="headerlink" title="The Money Box"></a>The Money Box</h3><p>他说什么就做什么呗，先买空心的android模型。这个还不太好找，找个大小合适的能放树莓派的还真的挺少的。。</p>
<p>最后找到的就是它：</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/android-money-box.jpg" alt="android-money-box"></p>
<p>其实是一个存钱罐，腿也不好看。不过只能先这样了。。下一个档位的就和人差不多大小了</p>
<p>接下来就要把脑袋锯了先。这个要归功于建筑系的同学了，家伙真全啊。。要是能用电锯就好了</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/step1-1.jpg" alt="step1-1"></p>
<p>但是实际上并没有电。。得在上课时间段才有电。不过这难不倒我：</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/step1-2.png" alt="step1-2"></p>
<p>费了半天劲总算是锯下来了。。接下来是钻掉眼睛。。//全靠我同学，我反正是这辈子没动过钻头。。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/step1-3.png" alt="step1-3"></p>
<h3 id="The-Motor"><a href="#The-Motor" class="headerlink" title="The Motor"></a>The Motor</h3><p>电机长这样，让它驱动脑袋貌似还缺点什么。。。所以我就去补买了一个小车轮</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/wheel-taobao.jpg" alt="wheel-taobao"></p>
<p>看起来有四驱车轮大小。。但是拿到手里一看。。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/wheel.jpg" alt="wheel"></p>
<p>卧槽吓死我了。。。不过好在还能装下。。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/step2-1.png" alt="step2-1"></p>
<p>里面垫了若干木头片和瓶盖。。</p>
<p>下一个问题就是电机怎么固定在脑袋下面呢。。简单想了想有下面两种方案：</p>
<ul>
<li>拿个支架给它支在中间</li>
</ul>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/wheel-1.png" alt="wheel-1"></p>
<ul>
<li>拿个板给它架起来</li>
</ul>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/wheel-2.png" alt="wheel-2"></p>
<p>按照原计划应该是什么东西都要放在存钱罐里面的，板子啊，电池啊什么的。所以肚子里面还是空一些好吧。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/wheel-3.png" alt="wheel-3"></p>
<p>木板是用激光雕的，不过掰的不是很好看<em>(:з」∠)</em> //感谢建筑系同学的技术支持。。</p>
<p>//对。。就是这个农夫山泉的瓶盖。。</p>
<h4 id="The-Motor-Driver"><a href="#The-Motor-Driver" class="headerlink" title="The Motor Driver"></a>The Motor Driver</h4><p>电机自己是不能动的，还需要买一块驱动板</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/motor-driver.jpg" alt="motor-driver"></p>
<p>然后把正极，负极，4个针脚接到树莓派对应的接口上。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/pins.png" alt="pins"></p>
<p>简单地说，就是2,6,11,12,13,15这些，当然接别的也能用</p>
<p>然后参考<a href="http://www.codelast.com/?p=5232" target="_blank" rel="external">这里</a>，得知只要依次向4个端口写1，步进电机就会转了！写的频率越高，转的速率越快。</p>
<h3 id="The-Camera"><a href="#The-Camera" class="headerlink" title="The Camera"></a>The Camera</h3><p>摄像头买的是树莓派专用的</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/camera.png" alt="camera"></p>
<p>下面就是到关键的人脸识别部分了！</p>
<p>第一反应，<a href="http://simplecv.org/" target="_blank" rel="external">SimpleCV</a>，同组的小伙伴糙快猛的写了一个出来。与此同时，我来搭片场，学名叫简易式计算机视觉工作室。。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/cvlab.png" alt="cvlab"></p>
<p>识别出来的是这样</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/simplecv.png" alt="simplecv"></p>
<p>看起来还不错是吧。不过动一下立马就完蛋了。。这个没有tracking功能。。</p>
<p>那就找带tracking的吧，比如<a href="https://github.com/kylemcdonald/FaceTracker" target="_blank" rel="external">这个</a>，效果是这样</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/facetracker.png" alt="facetracker"></p>
<p>卧槽连半张脸都能识别。</p>
<h3 id="The-Lens"><a href="#The-Lens" class="headerlink" title="The Lens"></a>The Lens</h3><p>不过还有一个问题就是摄像头的视野不能覆盖到中间。。。想一想这个玩意只能侧着看着你。。</p>
<p>机智的我立刻想到加一个鱼眼镜头不就好了。买买买。。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/fisheye.jpg" alt="fisheye"></p>
<p>不过由于形变，上面的两个人脸识别的东西应该性能会下降吧。。果然SimpleCV的那个基本上啥都识别不出来了。。第二个倒是还行，不过有时候会识别到奇奇怪怪的地方去。。</p>
<p>一个很自然的想法就是把鱼眼镜头形变的图像形变回去，简单调查一下果然这种东西还是有的</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/fisheye-calibration.png" alt="fisheye-calibration"></p>
<p>不过小伙伴告诉我这个东西做好了直接就能发paper了。。网上找的代码效果都不怎么明显。。有的还会造成现有的识别帧率下降。。<br>所以展示的时候我们果断的直接把这个模块给去了。。然后站的不是那么的偏。。</p>
<p>最终效果就是识别到人，电机极快的转过去，然后再识别。转的过程中是不识别的，所以还没有那么流畅，不过先这样吧。。</p>
<h3 id="The-Raspberry-Pi"><a href="#The-Raspberry-Pi" class="headerlink" title="The Raspberry Pi"></a>The Raspberry Pi</h3><p>树莓派是啥我就不多说了，得名是因为这个东西红红的像树莓做的派一样。。不过现在国内能买到的都是绿的了吧。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/red-raspberrypi.png" alt="red-raspberrypi"></p>
<p>我就有一个红色的，是当年最早出的时候就买的:)</p>
<p>作为ArchlinuxCN的maintainer之一，系统果断arch，虽然我们并没有进军archlinuxarm…</p>
<h3 id="The-Sound-Card"><a href="#The-Sound-Card" class="headerlink" title="The Sound Card"></a>The Sound Card</h3><p>仅仅是图像识别绝对满足不了我的脑洞。//好吧，其实是为了找理由能结合实验室方向。。</p>
<p>玩一玩语音好了。剧本是这样：想想你回到房间，一大堆Andriod齐刷刷的看着你。。。然后我大喊一声”同志们好！”，答”首长好”，”同志们辛苦啦！”，”为人民服务！”。。。//大夫我码完这个就去吃药。。</p>
<p>拆开来说就是下面这三个部分</p>
<ul>
<li>语音识别</li>
<li>命令分析</li>
<li>语音合成</li>
</ul>
<p>甭管怎么说，先录一段音出来再说吧。嗯？怎么没有用。。汗，原来自带的声卡只有输出没有输入。。。这都行。。先补买一个usb声卡好了。。切换声卡就用asoundconf</p>
<h3 id="Automatic-Speech-Recognition"><a href="#Automatic-Speech-Recognition" class="headerlink" title="Automatic Speech Recognition"></a>Automatic Speech Recognition</h3><p>先找现成的，github上的这个<a href="https://github.com/StevenHickson/PiAUISuite" target="_blank" rel="external">PiAUISuite</a>里面的VoiceCommand基本上就是我想要的功能了，<a href="http://blog.csdn.net/zebra2011/article/details/24258065" target="_blank" rel="external">这里</a>还有一份中文的说明，看起来很靠谱的样子。。</p>
<p>直接编译运行，并没有什么鸟用。。。一看，怎么是google speech api挂了？apiKey过期了吗，赶紧去换一个。搜出来一看，原来不仅仅是apiKey过期了的问题。。google speech api关了。。当时我心中就冒出”最大皮革厂倒闭了，老板带着小姨子跑了，还我血汗钱”的音效。。</p>
<p>得得得，转投其他api。听说科大讯飞做的比较火，就先试一试吧。</p>
<p>识别(ASR)的过程中踩了下面这些坑：</p>
<ul>
<li>必须是指定的采样频率</li>
<li>必须是指定的整数编码</li>
<li>必须是单声道</li>
<li>必须使音量在恰当的范围</li>
</ul>
<p>这几个坑真是搞的我一头雾水，根本不知道怎么回事，识别出来都”红红火火恍恍惚惚”，耗了好一段时间。。</p>
<p>词典里面写了”同志们好”和”同志们辛苦啦”//其他彩蛋就不说了</p>
<h3 id="The-VoiceCommand"><a href="#The-VoiceCommand" class="headerlink" title="The VoiceCommand"></a>The VoiceCommand</h3><p>虽说google speech api倒闭了，但是这个的其他部分还能用。</p>
<p>可以定义命令集，命令也可以有一些通配的能力。可以通过强制输入语音识别的内容来绕过倒闭的google api。</p>
<p>不过这个代码里面有bug你敢信。。。修bug的过程中发现这个代码里面用c++调了大量的系统命令。。。然后代码恶心的我要死，最后看不下去了。。shell直接写吧<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="literal">true</span></div><div class="line"><span class="keyword">do</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"start"</span></div><div class="line">        arecord -D plughw:Set <span class="_">-f</span> S16_LE -t wav <span class="_">-d</span> 3 -r 16000 -q /dev/shm/noise.wav</div><div class="line">        <span class="built_in">echo</span> <span class="string">"end"</span></div><div class="line">        volume=`sox /dev/shm/noise.wav -n stats <span class="_">-s</span> 16 2&gt;&amp;1 | awk <span class="string">'/^Max\\ level/ &#123;print $3&#125;'</span>`</div><div class="line">        threshold=5</div><div class="line">        <span class="keyword">if</span> [ $(<span class="built_in">echo</span> <span class="string">"<span class="variable">$volume</span> &gt; <span class="variable">$threshold</span>"</span> | bc) <span class="_">-eq</span> 1 ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$volume</span> is bigger than <span class="variable">$threshold</span>"</span></div><div class="line">                <span class="built_in">command</span>=`~/CN_voicecommand/bin/asr_sample d5f83239c52172627246d62227fb4eea /dev/shm/noise.wav |grep input | awk <span class="string">'&#123;print $3;exit&#125;'</span> |sed <span class="string">'s/input=//g'</span>`</div><div class="line">                <span class="built_in">echo</span> <span class="string">"command:"</span> <span class="variable">$command</span></div><div class="line">                <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$command</span>"</span> ]</div><div class="line">                <span class="keyword">then</span></div><div class="line">                        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$command</span>"</span> = <span class="string">"id=nomatch"</span> ]</div><div class="line">                        <span class="keyword">then</span></div><div class="line">                                <span class="built_in">continue</span></div><div class="line">                        <span class="keyword">fi</span></div><div class="line">                        ~/PiAUISuite/VoiceCommand/voicecommand -I <span class="variable">$command</span></div><div class="line">                <span class="keyword">fi</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>写出来不就那么几行吗。。费那么多劲干什么。。不过同时也能看出来，现在就是看见start，然后截3秒，识别一段时间。识别的过程中是什么都听不见的，这个就算下一步的改进目标吧。</p>
<h3 id="Text-To-Speech"><a href="#Text-To-Speech" class="headerlink" title="Text To Speech"></a>Text To Speech</h3><p>识别出来命令后，我就直接把命令规则定义好了：</p>
<pre><code>同志们好==tts 首长好
同志们辛苦了==tts 胃人民服务
同志们辛苦啦==tts 胃人民服务
</code></pre><p>为什么是”胃”。。因为科大讯飞的这个还是太弱了。。</p>
<p>google speech api的tts部分也挂了，也得用科大讯飞的。然后我们不知道怎么就把一个正常的女性播音员的声音改成了下述这个样子：</p>
<p><a href="http://7sbplw.com1.z0.glb.clouddn.com/tts_sample.wav" target="_blank" rel="external">tts_sample</a></p>
<p>萌萌的是吧。。播放设备用的是这个</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/speaker.jpg" alt="speaker"></p>
<h3 id="The-Battery"><a href="#The-Battery" class="headerlink" title="The Battery"></a>The Battery</h3><p>电池就选了我早就觊觎很久了的<a href="Robo://www.pijuice.com/" target="_blank" rel="external">PiJuice</a></p>
<p><img src="https://www.pi-supply.com/wp-content/uploads/2015/03/photo-original-300x300.jpg" alt="pijuice"></p>
<p>不过他们并没有货。。自从我下单到现在还是没有发货。。</p>
<h3 id="The-Robot"><a href="#The-Robot" class="headerlink" title="The Robot"></a>The Robot</h3><p>由于电池没到，所有东西肯定不能都放到肚子里面了。。只好把设计改为一部分放在外面了。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/raspberrypi-shell.png" alt="raspberrypi-shell"></p>
<p>给树莓派买了个外壳当底座。另外为了走线把那个存钱罐的腿也锯掉了一半。。然后就把它放在底座上了</p>
<p>接下来就是装摄像头。这个不好办，因为这个头是球面，但是里面的轴是圆柱，要斜着把它装上去，还要固定。不过这难不倒我</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/robot-1.jpg" alt="robot-1"></p>
<p>基本上把我所有手边能用到的材料都用上了。。完整组装好是这样</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/robot-2.jpg" alt="robot-2"></p>
<p>来一张头部特写</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/robot-3.jpg" alt="robot-3"></p>
<p>看起来还是挺帅气的～另外放一起特别有</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/terminator.jpg" alt="terminator"></p>
<p>的感觉有木有啊！！</p>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><p>Q.为什么只有一只眼了。。。</p>
<p>因为双摄像头的扩展板太贵了。。够买两个树莓派了。。</p>
<p>Q.原来的那两个眼睛的洞呢？</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/robot-4.jpg" alt="robot-4"></p>
<p>你刚才说啥？</p>
<p>Q.现在这个东西在哪呢？</p>
<p>就在我实验室的桌子上当电子宠物了。。我把语音识别的部分关了，会一直盯着我看。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;呼！终于从deadline里面爬出来一会儿让我有时间把这个之前开的坑填了。。&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;怎么想起来做这个的呢。。一开始是我的师兄的《人工智能基础理论选讲》课，说是要做大作业，做啥都行，软硬都能报销。&lt;br&gt;然后就引起我兴趣，为啥不借此机会好好地做(mai)开(mai)发(mai)呢。。&lt;br&gt;
    
    </summary>
    
    
      <category term="raspberry pi" scheme="http://jingbei.li/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>面向对象手法解OJ题</title>
    <link href="http://jingbei.li/2016/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%89%8B%E6%B3%95%E8%A7%A3OJ%E9%A2%98/"/>
    <id>http://jingbei.li/2016/01/02/面向对象手法解OJ题/</id>
    <published>2016-01-02T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>这个也是我给我们学校C++课程出的一个题，本来是个很简单的题目。。<br>为了考语法暴力面向对象。。。出的我自己都恶心的不行不行得了。<br>帮我检查bug的NOI大神看了以后表示“写的太好看了，我都看不懂了”。。</p>
<p>唉。。引用Linus Torvalds大神的一句名言<br><a id="more"></a></p>
<blockquote>
<p>Talk is cheap. Show me the code.</p>
<p>多说无益，放码过来。</p>
<p>–Linus Torvalds</p>
</blockquote>
<p>我就直接放码了。原题是个程序挖空的题，此处我就已经填好啦</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>兔子是繁殖能力很强的生物。现在我们有一对兔子，每1个月后它们会生下一对小兔子。小兔子1个月后会长成成年兔子，之后每1个月它们也会生下一对小兔子。</p>
<p>现在假设所有兔子都永远不会死，问INT_MAX-1个月后有多少对兔子呢？结果只需输出最后4位。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Matrix &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">int</span> m,n;</div><div class="line">	T** data;</div><div class="line">	Matrix(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">const</span> T &amp;value):m(m),n(n) &#123;</div><div class="line">		data=<span class="keyword">new</span> T*[m];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">			data[i]=<span class="keyword">new</span> T[n];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</div><div class="line">				data[i][j]=value;</div><div class="line">	&#125;</div><div class="line">	Matrix&lt;T&gt; <span class="keyword">operator</span>%(<span class="keyword">int</span> a) &#123;</div><div class="line">		Matrix&lt;T&gt; result(m,n,<span class="number">0</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</div><div class="line">				result[i][j]=data[i][j]%a;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	Matrix&lt;T&gt; <span class="keyword">operator</span>*(Matrix&lt;T&gt; a) &#123;</div><div class="line">		Matrix&lt;T&gt; result(m,a.n,<span class="number">0</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.n; j++)</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</div><div class="line">					result[i][j]+=data[i][k]*a[k][j]%<span class="number">10000</span>;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	T* <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123;</div><div class="line">		<span class="keyword">return</span> data[i];</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> squareMatrix:<span class="keyword">public</span> Matrix&lt;T&gt; &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	squareMatrix(<span class="keyword">int</span> n,<span class="keyword">const</span> T value): Matrix&lt;T&gt;(n,n,value) &#123;&#125;</div><div class="line">	squareMatrix(<span class="keyword">const</span> Matrix&lt;T&gt; &amp;a):Matrix&lt;T&gt;(a.m&lt;a.n?a.m:a.n,a.m&lt;a.n?a.m:a.n,<span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Matrix&lt;T&gt;::m; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;Matrix&lt;T&gt;::m; j++)</div><div class="line">				Matrix&lt;T&gt;::data[i][j]=a.data[i][j];</div><div class="line">	&#125;</div><div class="line">	squareMatrix&lt;T&gt; <span class="keyword">operator</span>^(<span class="keyword">int</span> a) &#123;</div><div class="line">		squareMatrix&lt;T&gt; p(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>*(*<span class="keyword">this</span>));</div><div class="line">		<span class="keyword">if</span>(a&gt;<span class="number">1</span>)</div><div class="line">			<span class="keyword">if</span>(a%<span class="number">2</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="keyword">operator</span>*(p^(a/<span class="number">2</span>))%<span class="number">10000</span>;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="keyword">return</span> p^(a/<span class="number">2</span>)%<span class="number">10000</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	squareMatrix&lt;<span class="keyword">int</span>&gt; a(<span class="number">2</span>,<span class="number">1</span>);</div><div class="line">	a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;(a^INT_MAX)[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h4&gt;&lt;p&gt;这个也是我给我们学校C++课程出的一个题，本来是个很简单的题目。。&lt;br&gt;为了考语法暴力面向对象。。。出的我自己都恶心的不行不行得了。&lt;br&gt;帮我检查bug的NOI大神看了以后表示“写的太好看了，我都看不懂了”。。&lt;/p&gt;
&lt;p&gt;唉。。引用Linus Torvalds大神的一句名言&lt;br&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://jingbei.li/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>论如何给一门课出大作业及评测系统</title>
    <link href="http://jingbei.li/2016/01/02/%E8%AE%BA%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%80%E9%97%A8%E8%AF%BE%E5%87%BA%E5%A4%A7%E4%BD%9C%E4%B8%9A%E5%8F%8A%E8%AF%84%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
    <id>http://jingbei.li/2016/01/02/论如何给一门课出大作业及评测系统/</id>
    <published>2016-01-02T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>本来是我的一门课的作业。。看到助教给的评测demo以后深受启发，就拿去考小朋友了。</p>
<p>另外友元也的确是一个神奇的存在。。我是本学期过了一半才代替我的室友(他有事)当了这门课的助教。<br>当时正好讲到友元，我第一次去答疑，顶门来一个人问我“友元blahblahblah”，我都愣了，啥？我混迹开源社区两年了，哪个西方国家的程序员写的代码我没有见过？就是没听说过友元这个东西。。。</p>
<a id="more"></a>
<p>然后我就想起了一句经验之谈：每个程序设计语言都有他设计的渣的地方。。一查，果然是java，c#，oc什么的都把这个玩意去了，嗯。。yahaliyahali。。</p>
<p>所以这玩意我就耿耿于怀了半个学期，心想一定要和大家分享一下。。</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>下述两个类用来模拟一个分布式存储系统，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//server.h</span></div><div class="line"><span class="keyword">class</span> Server &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		Server() &#123;&#125;</div><div class="line">		~Server() &#123;&#125;</div><div class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">UpdateTable</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;content, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;tableName)</span></span>;</div><div class="line">	<span class="keyword">protected</span>:</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">size_t</span>, *Worker&gt; mWorkers;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &gt; mTables;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//worker.h</span></div><div class="line"><span class="keyword">class</span> Worker &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		Worker(<span class="keyword">size_t</span> workerId) : mWorkerId(workerId) &#123;&#125;</div><div class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">UpdateTable</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;tableName, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;content)</span></span>;</div><div class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">ReadTable</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;tableName, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;content)</span></span>;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">CleanTable</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;tableName)</span></span>;</div><div class="line">	<span class="keyword">protected</span>:</div><div class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">CreateFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;fileId)</span></span>;</div><div class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">DeleteFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;fileId)</span></span>;</div><div class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">WriteToFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;fileId, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;content)</span></span>;</div><div class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">ReadFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;fileId, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;content)</span></span>;</div><div class="line">		<span class="keyword">size_t</span> mWorkerId;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; &gt; mTableFiles;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Server对象负责将字符串分配给多个Worker对象，Worker对象将字符串拆分为若干小文件存储。<br>Server中有存储Worker编号到Worker指针的映射。<br>Server通过调用UpdateTable这个函数来向所有Worker上传名为table内容为content的字符串。<br>Server会依次调用所有Worker的UpdateTable函数，如果所有Worker都成功则用CleanTable这个函数来清理老文件，<br>生成一个从table到已经上传了的worker编号的映射，之后返回上传成功。<br>如果任意一个Worker上传失败，Server需要用CleanTable让所有Worker回滚到上传之前的状态，之后返回更新失败。<br>Worker中存有table到一组真实文件路径的映射。<br>Worker中可以通过CreateFile，DeleteFile，ReadFile，WriteFile，函数来创建，删除，读出和写入文件。</p>
<p>现将Server::UpdateTable，Worker::UpdateTable，Worker::cleanTable这3个函数挖空，作为某课程的作业交给同学们实现。<br>你的任务是编写验证这些程序正确性的测试代码。要测试的流程如下：</p>
<p>(a) 正常的文件上传流程<br>原有代码中Worker的CreateFile，DeleteFile，ReadFile，WriteFile函数都是必定成功的。<br>所以这一步需要让Server调用一次UpdateTable，看是否返回上传成功。<br>(b) 检查Server::mTables的正确性<br>再添加一个新的TestWorker到TestServer中，之后检查mTableFiles的某些值是否为预期值。<br>(c) 检查上传的内容的正确性<br>(d) CreateFile出现问题时，检查回滚逻辑是否实现<br>新加的TestWorker的CreateFile必定会失败。<br>此时再向同一个table进行一次UpdateTable，看是否返回了更新失败。<br>之后检查原先的内容是否仍然可读。<br>(e) 检查多余的文件是否已经被删除<br>移除TestWorker，检查Worker::mTableFiles是否和(a)之后的一样。<br>再向同一个table进行一次成功的UpdateTable。<br>检查(a)之后的mTableFiles中的元素是否都为不可读。</p>
<p>为了方便测试，我们在Server类和Worker类中安插一个友元类Test。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Server &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		<span class="keyword">friend</span> <span class="keyword">class</span> Test;</div><div class="line">		...</div><div class="line">	...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>之后，请你对上述测试流程，完善下面的测试代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"server.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"worker.h"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">class</span> TestWorker:<span class="keyword">public</span> Worker &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		TestWorker(<span class="keyword">size_t</span> workerId): Worker(workerId) &#123;&#125;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">CreateFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;fileId)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> TestServer:<span class="keyword">public</span> Server &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		TestServer() &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</div><div class="line">				mWorkers[i] = <span class="keyword">new</span> Worker(i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">virtual</span> ~TestServer() &#123;</div><div class="line">			<span class="comment">//Delete all Worker instances</span></div><div class="line">			<span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">size_t</span>, Worker *&gt;::iterator it = mWorkers.begin(); it != mWorkers.end(); ++it)</div><div class="line">				<span class="keyword">delete</span> it-&gt;second;</div><div class="line">		&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">class</span> Test &#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">test</span><span class="params">(TestServer* testServer)</span></span>;</div><div class="line">	&#125;;</div><div class="line"><span class="keyword">void</span> Test::test() &#123;</div><div class="line">	TestServer* demo = <span class="keyword">new</span> TestServer();</div><div class="line">	<span class="keyword">if</span>(test(demo))</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"test pass."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"test fail."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> Test::test(TestServer* testServer) &#123;</div><div class="line">	<span class="built_in">string</span> tableName = <span class="string">"demo"</span>;</div><div class="line">	<span class="built_in">string</span> content = <span class="string">"this is a demo string"</span>;</div><div class="line">	<span class="built_in">string</span> content2 = <span class="string">"this is another demo string"</span>;</div><div class="line">	<span class="comment">//Test the normal updating process</span></div><div class="line">	<span class="keyword">if</span>(!testServer-&gt;UpdateTable(tableName, content))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="comment">//Insert an abnormal worker</span></div><div class="line">	testServer-&gt;mWorkers[<span class="number">3</span>] = <span class="keyword">new</span> TestWorker(<span class="number">3</span>);</div><div class="line">	<span class="comment">//Get mTables from the server</span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp; workers = testServer-&gt;mTables[<span class="string">"demo"</span>];</div><div class="line">	<span class="keyword">if</span>(workers.size() != <span class="number">3</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; mTableFiles[<span class="number">3</span>];</div><div class="line">	<span class="comment">//Judge each string we just updated to the workers</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; workers.size(); ++i) &#123;</div><div class="line">		<span class="built_in">string</span> result;</div><div class="line">		testServer-&gt;mWorkers[workers[i]]-&gt;ReadTable(tableName, result);</div><div class="line">		<span class="keyword">if</span>(result != content)</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		mTableFiles[i]=testServer-&gt;mWorkers[workers[i]]-&gt;mTableFiles;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//Now the updating process will fail because the abnormal worker</span></div><div class="line">	<span class="keyword">if</span>(testServer-&gt;UpdateTable(tableName, content2) != <span class="literal">false</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="comment">//The old string should be readable.</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; workers.size(); ++i) &#123;</div><div class="line">		<span class="built_in">string</span> result;</div><div class="line">		testServer-&gt;mWorkers[workers[i]]-&gt;ReadTable(tableName, result);</div><div class="line">		<span class="keyword">if</span>(result != content)</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//Remove the abnormal worker</span></div><div class="line">	<span class="keyword">delete</span>(testServer-&gt;mWorkers[<span class="number">3</span>]);</div><div class="line">	testServer-&gt;mWorkers.erase(testServer-&gt;mWorkers.find(<span class="number">3</span>));</div><div class="line">	<span class="comment">//mTableFiles should equal to the backup one</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; workers.size(); ++i)</div><div class="line">		<span class="keyword">if</span>(!(mTableFiles[i]==testServer-&gt;mWorkers[workers[i]]-&gt;mTableFiles))</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	testServer-&gt;UpdateTable(tableName, content2);</div><div class="line">	<span class="comment">//None of the pieces of the old string is readable now</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; workers.size(); ++i)&#123;</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; backupFilelist=mTableFiles[i][tableName];</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; targetFilelist=testServer-&gt;mWorkers[workers[i]]-&gt;mTableFiles[tableName];</div><div class="line">		<span class="comment">//Check the pieces one by one</span></div><div class="line">		targetFilelist.reserve(<span class="number">1</span>);</div><div class="line">		<span class="built_in">string</span> result;</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it=backupFilelist.begin();it!=backupFilelist.end();it++)&#123;</div><div class="line">			targetFilelist[<span class="number">0</span>]=*it;</div><div class="line">			<span class="keyword">if</span>(testServer-&gt;mWorkers[workers[i]]-&gt;ReadTable(tableName,result))</div><div class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Test::test();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="点评"><a href="#点评" class="headerlink" title="点评"></a>点评</h4><p>这句话其实最早我写在题目正文里面了。。</p>
<p>对程序安全性而言，友元类哪里是friend，简直就是fiend啊！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h4&gt;&lt;p&gt;本来是我的一门课的作业。。看到助教给的评测demo以后深受启发，就拿去考小朋友了。&lt;/p&gt;
&lt;p&gt;另外友元也的确是一个神奇的存在。。我是本学期过了一半才代替我的室友(他有事)当了这门课的助教。&lt;br&gt;当时正好讲到友元，我第一次去答疑，顶门来一个人问我“友元blahblahblah”，我都愣了，啥？我混迹开源社区两年了，哪个西方国家的程序员写的代码我没有见过？就是没听说过友元这个东西。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cpp" scheme="http://jingbei.li/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>我来给大家科普一下什么叫C模拟面向对象</title>
    <link href="http://jingbei.li/2015/12/29/%E6%88%91%E6%9D%A5%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%A7%91%E6%99%AE%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E5%8F%ABC%E6%A8%A1%E6%8B%9F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://jingbei.li/2015/12/29/我来给大家科普一下什么叫C模拟面向对象/</id>
    <published>2015-12-29T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>唉。。这个题本来是我给本校一门C++的课出的期末考试题，无奈被批”平常老嘱咐不要写C风格的程序”，然后就被干掉了。。但是这个技能本身还是有一定意义的，在此我就直接把原题目的空都填好了分享给大家。</p>
<p>注：下面这堆中，声明都是真的，实现都是我口胡的。最近口胡能力越来越强了。。。</p>
<a id="more"></a>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Pebble是一款于2013年初上市的智能手表，具有一块类似Kindle的黑白电子墨水屏，支持蓝牙链接以便从手机获取消息通知。<br>相对于今天才上市的Apple Watch，Pebble更加开放和友好的开发环境赢得了广大Geek的青睐。</p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/pebble.png" alt="pebble"><br><img src="http://7sbplw.com1.z0.glb.clouddn.com/pebble-watchface.png" alt="pebble-time"></p>
<p>虽说开发环境比较友好，但是，并！没！有！C++编译器，基本的开发语言只有C。。。</p>
<p><strong>但是，这并不妨碍你使用C来开发一个简单的Pebble程序</strong>，通过本学期的学习，你已经掌握了C语言的很多语法。</p>
<p>|C和C++共同的语法部分（本题中可以使用）|C语言不具备的语法（本题中无法使用的）|<br>|基本的数据类型|class,namespace,template|<br>|数组及指针|struct中无法包含函数体|<br>|循环体及函数体|string数据类型|<br>|宏语句|new与delete语句|</p>
<p><strong>并且，即便没有class，也并不妨碍你使用面向对象的思想来开发程序。</strong></p>
<p>我们现在就来尝试使用C来模拟出一个类，由于没有class，我们只能先用struct来构建出他的数据部分：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>我们现在就来尝试使用C来模拟出一个类，由于没有class，我们只能先用struct来构建出他的数据部分：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> GPoint &#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> x,y;<span class="comment">//表示坐标</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>接下来我们可以用下面的语句来定义GPoint类型的对象了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> GPoint a_point;</div></pre></td></tr></table></figure></p>
<p>为了调用方便，不如就用typedef把它改造的更像类一些<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> GPoint GPoint;</div></pre></td></tr></table></figure></p>
<p>现在我们就可以摆脱那个struct啦<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GPoint another_point;</div></pre></td></tr></table></figure></p>
<p>下面这个宏给我们演示了如何模拟出一个构造函数<br>利用{}来构建一个结构对，接下来强制类型转换成GPoint类型并返回<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GPoint(x, y) ((GPoint)&#123;(x), (y)&#125;)</span></div></pre></td></tr></table></figure></p>
<p>调用就像这样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a_Point=GPoint(<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>上面的struct和typedef两句还可以合并起来写<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> GSize &#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> w,h;<span class="comment">//表示宽度和高度</span></div><div class="line">&#125; GSize;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GSize(w, h) ((GSize)&#123;(w), (h)&#125;)</span></div></pre></td></tr></table></figure></p>
<p>接下来我们来构造一个内嵌其他类型的类<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> GRect &#123;<span class="comment">//描述一个矩形方框</span></div><div class="line">	GPoint origin;<span class="comment">//表示这个矩形的原点，即左上角</span></div><div class="line">	GSize size;<span class="comment">//表示这个矩形的大小</span></div><div class="line">&#125; GRect;</div></pre></td></tr></table></figure></p>
<p>现在我们来仿写一个GRect类型的构造函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GRect(x, y, w, h) ((GRect) &#123; &#123;(x), (y) &#125;, &#123;(w), (h)&#125;&#125;)</span></div></pre></td></tr></table></figure></p>
<p>对于简单的，不含函数的类，我们用上面的办法就可以解决了。<br>对于一些更基本的类，甚至可以这样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> GColor &#123;</div><div class="line">	GColorClear,GColorBlack</div><div class="line">&#125; GColor;</div></pre></td></tr></table></figure></p>
<p>接下来我们来用C来构建一个复杂的基类<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Layer Layer;</div><div class="line"><span class="keyword">struct</span> Layer &#123;</div><div class="line">	<span class="comment">//对于复杂的类我们需要一个this指针</span></div><div class="line">	Layer* <span class="keyword">this</span>;</div><div class="line">	GRect bounds;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>现在我们来实现这个类的构造函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">Layer* <span class="title">layer_create</span><span class="params">(GRect bounds)</span> </span>&#123;</div><div class="line">	Layer layer;</div><div class="line">	Layer* <span class="keyword">this</span>=&amp;layer;</div><div class="line">	<span class="keyword">this</span>-&gt;bounds=bounds;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样还要有析构函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layer_destroy</span><span class="params">(Layer* <span class="keyword">this</span>)</span> </span>&#123;</div><div class="line">	<span class="built_in">free</span>(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来定义一个成员函数，开头附加类名来表示这个类的归属<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">GRect <span class="title">layer_get_bounds</span><span class="params">(Layer* <span class="keyword">this</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;bounds;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以及其他成员函数，他们都以类名开头，第一个参数是这个类的对像的指针。对于一个静态函数，可以这样。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layer_add_child</span><span class="params">(Layer *parent, Layer *child)</span></span>;</div></pre></td></tr></table></figure></p>
<p>接下来我们来模拟继承自Layer和Text两个类的子类TextLayer<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> TextLayer TextLayer;</div><div class="line"><span class="keyword">struct</span> TextLayer &#123;</div><div class="line">	Layer* layer;<span class="comment">//存储基类的指针</span></div><div class="line">	TextLayer* <span class="keyword">this</span>;<span class="comment">//存储子类的指针</span></div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>接下来我们来实现子类的构造函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">TextLayer* <span class="title">text_layer_create</span><span class="params">(GRect bounds)</span> </span>&#123;</div><div class="line">	TextLayer textLayer;</div><div class="line">	TextLayer* <span class="keyword">this</span>= &amp;textLayer;</div><div class="line">	<span class="keyword">this</span>-&gt;layer=layer_create(bounds);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以及析构函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">text_layer_destroy</span><span class="params">(TextLayer* <span class="keyword">this</span>)</span> </span>&#123;</div><div class="line">	layer_destroy(<span class="keyword">this</span>-&gt;layer);</div><div class="line">	<span class="built_in">free</span>(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以及一些成员函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">Layer* <span class="title">text_layer_get_layer</span><span class="params">(TextLayer* <span class="keyword">this</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;layer;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">text_layer_set_text</span><span class="params">(TextLayer* text_layer, <span class="keyword">const</span> <span class="keyword">char</span>* text)</span></span>;</div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">text_layer_get_text</span><span class="params">(TextLayer* text_layer)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">text_layer_set_background_color</span><span class="params">(TextLayer* text_layer, GColor color)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">text_layer_set_text_color</span><span class="params">(TextLayer* text_layer, GColor color)</span></span>;</div></pre></td></tr></table></figure></p>
<p>以及其他成员函数</p>
<p>同样我们还有另一个继承自Layer的类，用来存储图片<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> BitmapLayer BitmapLayer;</div><div class="line"><span class="keyword">struct</span> BitmapLayer &#123;</div><div class="line">	Layer* layer;</div><div class="line">	BitmapLayer* <span class="keyword">this</span>;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>现在我们还有一个同时继承自TextLayer和BitmapLayer的类<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> TextBitmapLayer TextBitmapLayer;</div><div class="line"><span class="keyword">struct</span> TextBitmapLayer &#123;</div><div class="line">	TextLayer* textLayer;</div><div class="line">	BitmapLayer* bitmapLayer;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我们来仿照C++解决类似情况的手法实现这个类的构造函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">TextBitmapLayer* <span class="title">text_bitmap_layer_create</span><span class="params">(GRect bounds)</span> </span>&#123;</div><div class="line">	TextBitmapLayer textBitmapLayer;</div><div class="line">	TextBitmapLayer* <span class="keyword">this</span>=&amp;textBitmapLayer;</div><div class="line">	<span class="keyword">this</span>-&gt;textLayer=text_layer_create(bounds);</div><div class="line">	BitmapLayer bitmapLayer;</div><div class="line">	<span class="keyword">this</span>-&gt;bitmapLayer=&amp;bitmapLayer;</div><div class="line">	<span class="keyword">this</span>-&gt;bitmapLayer-&gt;<span class="keyword">this</span>=&amp;bitmapLayer;</div><div class="line">	<span class="keyword">this</span>-&gt;bitmapLayer-&gt;layer=<span class="keyword">this</span>-&gt;textLayer-&gt;layer;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以及析构函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">text_bitmap_layer_detroy</span><span class="params">(TextBitmapLayer* <span class="keyword">this</span>)</span> </span>&#123;</div><div class="line">	text_layer_destroy(<span class="keyword">this</span>-&gt;textLayer);</div><div class="line">	<span class="built_in">free</span>(<span class="keyword">this</span>-&gt;bitmapLayer);</div><div class="line">	<span class="built_in">free</span>(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们就来为pebble实现一个右图中那个简单的watchface吧<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pebble.h&gt;</span></span></div><div class="line"><span class="keyword">static</span> Window* s_main_window;<span class="comment">//表示watchface所属的窗口，即最顶层的Layer</span></div><div class="line"><span class="keyword">static</span> TextLayer* s_time_layer;<span class="comment">//用于显示时间</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_time</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//定义每单位时间过去以后的动作</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tick_handler</span><span class="params">(<span class="keyword">struct</span> tm* tick_time, TimeUnits units_changed)</span> </span>&#123;</div><div class="line">	<span class="comment">//获取本地时间</span></div><div class="line">	<span class="keyword">time_t</span> temp = time(<span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">struct</span> tm* tick_time = localtime(&amp;temp);</div><div class="line">	<span class="comment">//生成可读的时间格式</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> s_buffer[<span class="number">8</span>];</div><div class="line">	strftime(s_buffer, <span class="keyword">sizeof</span>(s_buffer), <span class="string">"%H:%M"</span>, tick_time);</div><div class="line">	<span class="comment">//把可读的时间字符串写到全局的TextLayer中</span></div><div class="line">	text_layer_set_text(s_time_layer, s_buffer);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main_window_load</span><span class="params">(Window* window)</span> </span>&#123;</div><div class="line">	<span class="comment">//window包含了一个基础的layer，覆盖了整个显示屏</span></div><div class="line">	Layer* window_layer = window_get_root_layer(window);</div><div class="line">	<span class="comment">//获取显示屏的大小</span></div><div class="line">	GRect bounds = layer_get_bounds(window_layer);</div><div class="line">	<span class="comment">//我们来把中间那个TextLayer放到合适的位置</span></div><div class="line">	s_time_layer = text_layer_create(GRect(<span class="number">0</span>, <span class="number">52</span>, bounds.size.w, <span class="number">50</span>));</div><div class="line">	<span class="comment">//设置背景和文字的颜色</span></div><div class="line">	text_layer_set_background_color(s_time_layer, GColorClear);</div><div class="line">	text_layer_set_text_color(s_time_layer, GColorBlack);</div><div class="line">	<span class="comment">//设置字体和文字的摆放方式</span></div><div class="line">	text_layer_set_font(s_time_layer, FONT_KEY_BITHAM_42_BOLD);</div><div class="line">	text_layer_set_text_alignment(s_time_layer, GTextAlignmentCenter);</div><div class="line">	<span class="comment">//把这个层添加到Window的所属层中，否则不会显示出来</span></div><div class="line">	layer_add_child(window_layer, text_layer_get_layer(s_time_layer));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main_window_unload</span><span class="params">(Window* window)</span> </span>&#123;</div><div class="line">	<span class="comment">//定义这个Window卸载时的动作，要把所有所属层都释放掉</span></div><div class="line">	text_layer_destroy(s_time_layer);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//创建一个Window</span></div><div class="line">	s_main_window = window_create();</div><div class="line">	<span class="comment">//定义了这个Window的加载与卸载时的动作，用了函数指针来描述多态，看不懂可无视</span></div><div class="line">	window_set_window_handlers(s_main_window, (WindowHandlers) &#123;</div><div class="line">		.load = main_window_load,</div><div class="line">		 .unload = main_window_unload</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">//把我们的watchface压入Window栈的栈顶，这样就可以显示出来了</span></div><div class="line">	<span class="comment">//第二个参数表示启用过场动画</span></div><div class="line">	window_stack_push(s_main_window, <span class="literal">true</span>);</div><div class="line">	<span class="comment">//定义多久触发一次tick_handler</span></div><div class="line">	tick_timer_service_subscribe(MINUTE_UNIT, tick_handler);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">	<span class="comment">//先创建出我们的watchface</span></div><div class="line">	init();</div><div class="line">	<span class="comment">//这一步我们的watchface就持续运行啦</span></div><div class="line">	app_event_loop();</div><div class="line">	<span class="comment">//watchface退出时的动作</span></div><div class="line">	window_destroy(s_main_window);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译，运行！但是发现这个watchface显示的时间有时候会与真实时间有误差，请问误差最大是多少？为了降低误差，有什么办法吗？</p>
<blockquote>
<p>最大偏差一分钟，因为每一分钟才调用一次tick_handler。把MINUTE_UNIT改成SECOND_UNIT就好了。</p>
</blockquote>
<h4 id="点评"><a href="#点评" class="headerlink" title="点评"></a>点评</h4><p>我是忍住了才没喷AppleWatch…完全不可用的待机，不防水，必须和ios应用绑定。。真是不行不行的了。。</p>
<p>另外关于多态的实现，其实我早就想用函数指针了，写基类的时候写写删删了好几次。。。无奈还是没写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h4&gt;&lt;p&gt;唉。。这个题本来是我给本校一门C++的课出的期末考试题，无奈被批”平常老嘱咐不要写C风格的程序”，然后就被干掉了。。但是这个技能本身还是有一定意义的，在此我就直接把原题目的空都填好了分享给大家。&lt;/p&gt;
&lt;p&gt;注：下面这堆中，声明都是真的，实现都是我口胡的。最近口胡能力越来越强了。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://jingbei.li/tags/c/"/>
    
      <category term="c" scheme="http://jingbei.li/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>记sort中的一个bug</title>
    <link href="http://jingbei.li/2015/10/01/sortbug/"/>
    <id>http://jingbei.li/2015/10/01/sortbug/</id>
    <published>2015-10-01T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>这个bug源自我的同学<a href="https://github.com/perypery" target="_blank" rel="external">perypery</a>，在和中文大战三百回合之后。。。</p>
<h3 id="bug具体是这样的"><a href="#bug具体是这样的" class="headerlink" title="bug具体是这样的"></a>bug具体是这样的</h3><p>建立一个包含多的全角正反小括号的文件，一个一行：<br><a id="more"></a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat test.txt</div><div class="line">）</div><div class="line">）</div><div class="line">（</div><div class="line">（</div></pre></td></tr></table></figure>
<p>然后<code>sort -u test.txt</code>，期望的输出肯定是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sort -u test.txt</div><div class="line">（</div><div class="line">）</div></pre></td></tr></table></figure>
<p>但是实际上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sort -u a.txt</div><div class="line">）</div></pre></td></tr></table></figure>
<p>嗯？怎么回事？<code>（</code>哪里去了？</p>
<h3 id="多版本验证以及降级时遇到的问题"><a href="#多版本验证以及降级时遇到的问题" class="headerlink" title="多版本验证以及降级时遇到的问题"></a>多版本验证以及降级时遇到的问题</h3><p><code>sort</code>来自于<code>coreutils</code>这个软件包，在8.13这个版本时还是好好的。。8.{20,21,22}均有这个问题。<br>于是我先下了一个8.13，打算降级回去，编译的时候发现<code>gets()</code>这个函数已经从<code>stdio.h</code>里面干掉了，编译器表示推荐使用<code>fgets()</code>。</p>
<blockquote>
<p>猜想，是不是因为这个导致获取文本时出现了变化？这个变化使<code>（</code>和<code>）</code>被识别成了同一个字符？</p>
</blockquote>
<h3 id="高版本的解决方案"><a href="#高版本的解决方案" class="headerlink" title="高版本的解决方案"></a>高版本的解决方案</h3><p>经我的同学们调查，这个问题在<a href="http://unix.stackexchange.com/questions/17198/where-has-my-uniq-or-sort-u-line-gone-with-some-unicode-characters" target="_blank" rel="external">这里</a>也有提及。不仅仅<code>sort</code>，<code>uniq</code>也有这个问题。原因果然是被认成了同一个字符。。</p>
<p>不过我的shell内都设置了<code>LANG=zh_CN.UTF-8</code>。按理说不应该啊。。后来发现这个和shell的LOCALE没什么关系，要看Glibc用的是什么LOCALE。对应的就是<code>LC_COLLATE</code>这个变量。不过我把这个变量设置成<code>zh_CN*</code>都没有效果，设置成<code>C</code>(就是<code>POSIX</code>)以后倒是正常了。</p>
<p>所以目前的解决方案就是临时设置一下<code>LC_COLLATE</code>了。因为</p>
<blockquote>
<p>The first rule of LC_COLLATE is: don’t use LC_COLLATE.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ env LC_COLLATE=C sort -u test.txt</div><div class="line">（</div><div class="line">）</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个bug源自我的同学&lt;a href=&quot;https://github.com/perypery&quot;&gt;perypery&lt;/a&gt;，在和中文大战三百回合之后。。。&lt;/p&gt;
&lt;h3 id=&quot;bug具体是这样的&quot;&gt;&lt;a href=&quot;#bug具体是这样的&quot; class=&quot;headerlink&quot; title=&quot;bug具体是这样的&quot;&gt;&lt;/a&gt;bug具体是这样的&lt;/h3&gt;&lt;p&gt;建立一个包含多的全角正反小括号的文件，一个一行：&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="shell" scheme="http://jingbei.li/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Thinkpad E430电池不充电的问题的解决</title>
    <link href="http://jingbei.li/2015/09/23/Thinkpad-E430%E7%94%B5%E6%B1%A0%E4%B8%8D%E5%85%85%E7%94%B5%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>http://jingbei.li/2015/09/23/Thinkpad-E430电池不充电的问题的解决/</id>
    <published>2015-09-23T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题困扰我很长时间了，电池经常充到12%就卡住了。。多种折腾:</p>
<ul>
<li>用一点点下去再充</li>
<li>完全放电</li>
<li>电池扔冰箱里</li>
<li>换电池</li>
</ul>
<p>均无效。最后无奈找微信号联想服务(LenovoServices)咨询，给了一个偏方：<br><a id="more"></a></p>
<ul>
<li>关机</li>
<li>把电池和电源都拔了</li>
<li>按住电源健30秒</li>
<li>等3分钟</li>
<li>接回去开始用</li>
</ul>
<p>结果真的能用了。。。</p>
<p>当然那个等3分钟没必要哈。。关键是<code>按住电源健30秒</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题困扰我很长时间了，电池经常充到12%就卡住了。。多种折腾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用一点点下去再充&lt;/li&gt;
&lt;li&gt;完全放电&lt;/li&gt;
&lt;li&gt;电池扔冰箱里&lt;/li&gt;
&lt;li&gt;换电池&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;均无效。最后无奈找微信号联想服务(LenovoServices)咨询，给了一个偏方：&lt;br&gt;
    
    </summary>
    
    
      <category term="thinkpad" scheme="http://jingbei.li/tags/thinkpad/"/>
    
      <category term="hardware" scheme="http://jingbei.li/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>Openwrt 15.05rc1 HG255D的ipv6支持</title>
    <link href="http://jingbei.li/2015/08/26/enable-ipv6-nat-in-openwrt/"/>
    <id>http://jingbei.li/2015/08/26/enable-ipv6-nat-in-openwrt/</id>
    <published>2015-08-26T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>感谢<a href="blog.rjjacky.info">rjjacky</a>把他的HG255D转手给我折腾openwrt了。这次折腾的主要目标是ipv6支持。</p>
<h3 id="首先是蛋疼的固件"><a href="#首先是蛋疼的固件" class="headerlink" title="首先是蛋疼的固件"></a>首先是蛋疼的固件</h3><p>openwrt对hg255d的支持至少我从15.05rc2就已经看不到了。。我先尝试自己编译一个。</p>
<a id="more"></a>
<p>openwrt自己的wiki上的编译guide就好几种。。根本不知道是哪个，并且除了<code>make menuconfig</code>以外还有很多隐藏的地方要改。<br>经过几次编译，没有一次flash进去能用的。。。放弃。。</p>
<p>后来从<a href="http://www.right.com.cn/Forum/thread-167159-1-1.html" target="_blank" rel="external">此处</a>下载了一个15.05-rc1带部分ipv6的固件，总算刷进去了。</p>
<p>这个固件还算不错，wan和wan6直接就获取到ipv6地址了，lan内部能获取到一个由dhcpv6分配的有奇怪prefix的ipv6地址。</p>
<p>不过没有意义，lan内的机器还是访问不了ipv6的外网。</p>
<p>于是，我的第一反应：</p>
<h3 id="做个ipv6的nat"><a href="#做个ipv6的nat" class="headerlink" title="做个ipv6的nat"></a>做个ipv6的nat</h3><h4 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h4><p>参见<a href="http://www.7forz.com/2555/" target="_blank" rel="external">这篇blog</a></p>
<ul>
<li>opkg装kmod-ip6tables，kmod-ipt-nat6。</li>
</ul>
<blockquote>
<p>装的时候的小插曲：源里面有个链接失效了，注释掉吧先。。</p>
</blockquote>
<ul>
<li>然后运行 <code>ip6tables -t nat -L</code> 检测一下。</li>
</ul>
<p>不过他之后这句</p>
<blockquote>
<p>在开机启动脚本上添加ifconfig br-lan xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/64</p>
</blockquote>
<p>看起来有点不雅。。</p>
<h4 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h4><p>于是我想到了之前看到的知乎上的<a href="http://www.zhihu.com/question/29667477/answer/47149165" target="_blank" rel="external">这个问题</a>的第一个回答，可以把wan获取到的ipv6地址弄到lan上去。</p>
<p>所以下一步的配置是</p>
<ul>
<li>在LuCI界面删除LAN-ipv6配置下的Global ULA-Prefix里面的数值</li>
<li>修改/etc/config/dhcp的对应片段如下，请用脑子改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">config dhcp &apos;lan&apos;</div><div class="line">	option interface &apos;lan&apos;</div><div class="line">	option start &apos;100&apos;</div><div class="line">	option limit &apos;150&apos;</div><div class="line">	option leasetime &apos;12h&apos;</div><div class="line">	option ra &apos;hybrid&apos;</div><div class="line">	option dhcpv6 &apos;hybrid&apos;</div><div class="line">	option ndp &apos;hybrid&apos;</div><div class="line">	option ra_management &apos;1&apos;</div><div class="line">config dhcp &apos;wan6&apos;</div><div class="line">	option interface &apos;wan&apos;</div><div class="line">	option dhcpv6 &apos;hybrid&apos;</div><div class="line">	option ra &apos;hybrid&apos;</div><div class="line">	option ndp &apos;hybrid&apos;</div><div class="line">	option master &apos;1&apos;</div></pre></td></tr></table></figure>
<ul>
<li>确保odhcpd是处于开机启动状态</li>
</ul>
<blockquote>
<p>如果现在重启，正常的情况应该是，LAN会获得wan处的ipv6地址（同为2001开头），然后LAN下面的设备各自获得自己的ipv6地址。<br>这样连radvd也不用管了～</p>
</blockquote>
<h4 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h4><p>好现在回到part1的那篇blog，做最后一步：</p>
<ul>
<li>在 /etc/firewall.user 中加入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip6tables -t nat -I POSTROUTING -s xxxx:xxxx:xxxx:xxxx::/64 -j MASQUERADE  #其中的IP是LAN的前4段</div></pre></td></tr></table></figure>
<ul>
<li>Reboot and enjoy～</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢&lt;a href=&quot;blog.rjjacky.info&quot;&gt;rjjacky&lt;/a&gt;把他的HG255D转手给我折腾openwrt了。这次折腾的主要目标是ipv6支持。&lt;/p&gt;
&lt;h3 id=&quot;首先是蛋疼的固件&quot;&gt;&lt;a href=&quot;#首先是蛋疼的固件&quot; class=&quot;headerlink&quot; title=&quot;首先是蛋疼的固件&quot;&gt;&lt;/a&gt;首先是蛋疼的固件&lt;/h3&gt;&lt;p&gt;openwrt对hg255d的支持至少我从15.05rc2就已经看不到了。。我先尝试自己编译一个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openwrt" scheme="http://jingbei.li/tags/openwrt/"/>
    
      <category term="ipv6" scheme="http://jingbei.li/tags/ipv6/"/>
    
  </entry>
  
  <entry>
    <title>《星杯传说 破晓》的人物技能平衡调整</title>
    <link href="http://jingbei.li/2015/07/30/custom-update-for-stargrail-lite-edition/"/>
    <id>http://jingbei.li/2015/07/30/custom-update-for-stargrail-lite-edition/</id>
    <published>2015-07-30T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>《星杯传说 破晓》原版的人物平衡性就有所欠缺，在扩展包《龙族复兴》加入以后这一点就变得更为突出。<br>为了让这个游戏还能玩，我个人对其中的人物技能做了下述调整。<br><a id="more"></a></p>
<ul>
<li>被增强的角色：游侠 占星家 皇家侍卫 血天使 暗之王女</li>
<li><p>被削弱的角色：星纹师 龙之契约者 真龙女王</p>
<!--* 无调整的角色：龙之契约者 天马骑士 圣堂刺客 炼金术士 咒术师 驱魔者 龙骑统帅 风暴执政官 剑舞者 大地武士 龙语者 幽魂法师 霜雪公主 裁决者 心灵塑师 战歌祭司-->
</li>
<li><p>进一步的调整打算：</p>
<ul>
<li>buff list: 圣堂刺客 血天使 驱魔者</li>
<li>nerf list: 龙语者 裁决者</li>
</ul>
</li>
</ul>
<h3 id="被增强的角色"><a href="#被增强的角色" class="headerlink" title="被增强的角色"></a>被增强的角色</h3><ul>
<li>游侠<ul>
<li>【追风刺】：你的风神斩就是黯灭。</li>
</ul>
</li>
<li>占星家<ul>
<li>增加效果：如果你的所有预兆牌都是风神斩和地裂斩，则增加一张预兆牌，可多次发动。</li>
</ul>
</li>
<li>皇家侍卫<ul>
<li>【神圣护卫】：【当本方角色受到伤害并导致X点士气下降后发动】你分配X点治疗。</li>
</ul>
</li>
<li>血天使<ul>
<li>【炼雷地狱】：【弃总计2张的雷系或地系牌】对一名对手造成2点法术伤害。</li>
</ul>
</li>
<li>暗之王女<ul>
<li>增加效果：任何时候你都可以用黯灭应战。</li>
<li>【镇魂曲】：【攻击命中，伤害结算后发动，弃X张法术牌】对本次攻击的对手和自己各造成额外X点法术伤害。</li>
</ul>
</li>
</ul>
<h3 id="被削弱的角色"><a href="#被削弱的角色" class="headerlink" title="被削弱的角色"></a>被削弱的角色</h3><ul>
<li>星纹师<ul>
<li>【命运雕刻】：指定一名不少于2张手牌的队友给你2张牌，之后将手中的2张牌交给任意一名队友，我方战绩区+1宝石。</li>
</ul>
</li>
<li>真龙女王<ul>
<li>移除【龙魂守护】</li>
<li>【真龙觉醒】：满足以下条件时，翻转任意1张“禁制”牌，在你的回合结束时，强制重新翻回所有“禁制”牌。<ul>
<li>我方因收到伤害导致士气下降时</li>
<li>场上有星杯合成时</li>
</ul>
</li>
<li>增加效果：你只能按照【龙神恩惠】【龙王神力】【百万龙炎】【圣龙威压】的顺序翻开及移除禁制。</li>
<li>增加效果：每发动一次【龙族复兴】，【龙族复兴】所需的宝石数量+1。</li>
<li>【龙王神力】：【主动攻击命中后弃X张异系牌】本次伤害额外+X，“龙脉束缚”存在时不能发动该技能</li>
<li>【百万龙炎】：【弃X张同系牌】对自己和任一对手各造成X点法术伤害，“龙狂迷锁”存在时不能发动该技能。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《星杯传说 破晓》原版的人物平衡性就有所欠缺，在扩展包《龙族复兴》加入以后这一点就变得更为突出。&lt;br&gt;为了让这个游戏还能玩，我个人对其中的人物技能做了下述调整。&lt;br&gt;
    
    </summary>
    
    
      <category term="desktop game" scheme="http://jingbei.li/tags/desktop-game/"/>
    
  </entry>
  
  <entry>
    <title>The httpd.ini redirect rules for YOURLS</title>
    <link href="http://jingbei.li/2015/02/02/the-httpdini-redirect-rules-for-yourls/"/>
    <id>http://jingbei.li/2015/02/02/the-httpdini-redirect-rules-for-yourls/</id>
    <published>2015-02-02T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>The <code>.htaccess</code> for <a href="http://yourls.org/" target="_blank" rel="external">YOURLS</a> will not work on Windows servers.<br>Although YOURLS has noticed that and will create <code>web.config</code> automatically on Windows, my first url shortener site, <a href="http://url.jingbei.li/" target="_blank" rel="external">url.jingbei.li</a> still cannot redirect links as my expect.</p>
<a id="more"></a>
<p>The reason is the Windows server I used is an old IIS server not a IIS7 server, the rewrite rules file should be <code>httpd.ini</code>, not <code>web.config</code>.</p>
<p>And <code>REQUEST_FILENAME</code> does not check the local files because it is relative. The current solution is writing all the file names and directory name manually to <code>httpd.ini</code>. It is a little silly, but works.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[ISAPI_Rewrite]</div><div class="line">RewriteRule /admin(.*) /admin$1 [L]</div><div class="line">RewriteRule /css(.*) /css$1 [L]</div><div class="line">RewriteRule /images(.*) /images$1 [L]</div><div class="line">RewriteRule /includes(.*) /includes$1 [L]</div><div class="line">RewriteRule /js(.*) /js$1 [L]</div><div class="line">RewriteRule /pages(.*) /pages$1 [L]</div><div class="line">RewriteRule /user(.*) /user$1 [L]</div><div class="line">RewriteRule /(.*).html /$1.html [L]</div><div class="line">RewriteRule /(.*).php /$1.php [L]</div><div class="line">RewriteRule /.+ /yourls-loader.php [L]</div></pre></td></tr></table></figure>
<h4 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h4><p>I’ve also resigned another domain, <a href="http://pturl.tk/" target="_blank" rel="external">pturl.tk</a>. It does the same things that url.jingbei.li does, but much shorter. :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The &lt;code&gt;.htaccess&lt;/code&gt; for &lt;a href=&quot;http://yourls.org/&quot;&gt;YOURLS&lt;/a&gt; will not work on Windows servers.&lt;br&gt;Although YOURLS has noticed that and will create &lt;code&gt;web.config&lt;/code&gt; automatically on Windows, my first url shortener site, &lt;a href=&quot;http://url.jingbei.li/&quot;&gt;url.jingbei.li&lt;/a&gt; still cannot redirect links as my expect.&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows" scheme="http://jingbei.li/tags/windows/"/>
    
      <category term="php" scheme="http://jingbei.li/tags/php/"/>
    
      <category term="yourls" scheme="http://jingbei.li/tags/yourls/"/>
    
  </entry>
  
  <entry>
    <title>Moved to jingbei.li</title>
    <link href="http://jingbei.li/2015/01/26/moved-to-jingbeili/"/>
    <id>http://jingbei.li/2015/01/26/moved-to-jingbeili/</id>
    <published>2015-01-26T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p><code>.li</code> is the ccTLD(Internet country code top-level domain) for Liechtenstein. I first saw this domain is at <a href="http://www.iisp.com" target="_blank" rel="external">iisp.com</a>. The price is pretty high(about $40/year) and made me give up.</p>
<p>It so happened that this domain is also sold at <a href="http://www.namecheap.com" target="_blank" rel="external">namecheap</a> with 14.99$/year. According to the significance of this domain to me and such a low price, I bought it with no second thought.</p>
<p>BTW, I also set up a custom email with this domain, <a href="mailto:i@jingbei.li">i@jingbei.li</a>. But my old main email account seems to need a long time to fade out.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;.li&lt;/code&gt; is the ccTLD(Internet country code top-level domain) for Liechtenstein. I first saw this domain is at &lt;a href=&quot;http://ww
    
    </summary>
    
    
      <category term="logs" scheme="http://jingbei.li/tags/logs/"/>
    
  </entry>
  
  <entry>
    <title>A simple bat script to splicing videos</title>
    <link href="http://jingbei.li/2015/01/23/a-simple-bat-script-to-splicing-videos/"/>
    <id>http://jingbei.li/2015/01/23/a-simple-bat-script-to-splicing-videos/</id>
    <published>2015-01-23T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>Well, actually it’s a task given by my uncle. So the spirit of this script should be KISS, “Keep It Simple, Stupid”.</p>
<p>Instead of GUI, I choose ffmpeg to be the decoder(and the encoder if necessary). Luckily, ffmpeg has a <a href="http://ffmpeg.zeranoe.com/builds/" target="_blank" rel="external">static windows binary build</a>. A good start!<br><a id="more"></a><br>The next part is writing a KISS script for windows. Because I’m not familiar to bat files at all, it took a while before I finally found out a trick to solve a problem about processing the files’ name.</p>
<p>The final version of the script looks like the following:</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">cd</span> /d %~dp0</div><div class="line"><span class="built_in">set</span> ffmpeg=bin\ffmpeg.exe</div><div class="line"><span class="built_in">del</span> filelist.txt</div><div class="line"><span class="built_in">del</span> splicing.mkv</div><div class="line">:LOOP</div><div class="line"><span class="keyword">IF</span> [%<span class="number">1</span>]==[] <span class="keyword">GOTO</span> END</div><div class="line">	<span class="built_in">set</span> filename=%<span class="number">1</span></div><div class="line">	<span class="built_in">echo</span> file ^'%~<span class="number">1</span>^' &gt;&gt;filelist.txt </div><div class="line">	<span class="built_in">SHIFT</span></div><div class="line"><span class="keyword">GOTO</span> LOOP</div><div class="line">:END</div><div class="line"><span class="variable">%ffmpeg%</span> -f concat -i filelist.txt -c <span class="built_in">copy</span> splicing.mkv</div><div class="line"><span class="built_in">rename</span> splicing.mkv spliced.mkv</div><div class="line"><span class="built_in">del</span> filelist.txt</div></pre></td></tr></table></figure>
<p>The trick is using <code>%~1</code> to remove the <code>&quot;</code> around the strings with spaces. Then force adding <code>&#39;</code> around all the filenames or else the <code>\</code> will be escaped.</p>
<p>The usage of this script is quite simple. Make sure <code>bin\ffmpeg.exe</code> exist then drag all the videos to the script file.<br>By default, it will not recode the videos to increase efficiency. If it goes wrong, such as splicing videos with different sizes, or the videos need to recode, just edit the ffmpeg command to fix it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Well, actually it’s a task given by my uncle. So the spirit of this script should be KISS, “Keep It Simple, Stupid”.&lt;/p&gt;
&lt;p&gt;Instead of GUI, I choose ffmpeg to be the decoder(and the encoder if necessary). Luckily, ffmpeg has a &lt;a href=&quot;http://ffmpeg.zeranoe.com/builds/&quot;&gt;static windows binary build&lt;/a&gt;. A good start!&lt;br&gt;
    
    </summary>
    
    
      <category term="script" scheme="http://jingbei.li/tags/script/"/>
    
      <category term="ffmpeg" scheme="http://jingbei.li/tags/ffmpeg/"/>
    
      <category term="windows" scheme="http://jingbei.li/tags/windows/"/>
    
      <category term="bat" scheme="http://jingbei.li/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>A colorful byobu script to notify your new mails and feeds</title>
    <link href="http://jingbei.li/2015/01/09/a-simple-byobu-script-to-notify-your-new-mails-and-feeds/"/>
    <id>http://jingbei.li/2015/01/09/a-simple-byobu-script-to-notify-your-new-mails-and-feeds/</id>
    <published>2015-01-09T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>After <a href="../../../../2014/12/29/using-rssdrop-to-read-feeds-in-mutt/">delivering all the feeds to Maildirs by rssdrop</a>, I also need a notification daemon in my byobu shell.</p>
<p>Byobu supports custom script and display the outputs in the bottom bar. And particularly, you can <a href="../../../../2014/11/11/show-colors-in-byobu-control-bar/">use colors in byobu script’s output</a>!<br><a id="more"></a></p>
<p><img src="http://7sbplw.com1.z0.glb.clouddn.com/screenshot-20150109_155440.png" alt="img"></p>
<p>Here is my notification script at <code>~/.byobu/bin/5_mail</code>. 5 means checking every 5 seconds. Byobu will force all the scripts those period is shorter than 5 seconds to run as 5.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/sh -e</span></div><div class="line">MAILDIR=<span class="string">"/home/<span class="variable">$USER</span>/Mail/Yahoo/Inbox"</span></div><div class="line">LOCK=<span class="string">"/home/<span class="variable">$USER</span>/桌面/新邮件.desktop"</span></div><div class="line">LOCKFILE=<span class="string">"/home/<span class="variable">$USER</span>/.byobu/bin/新邮件.desktop"</span></div><div class="line">MSGICON=<span class="string">"/usr/share/icons/Faenza/apps/scalable/gmail.svg"</span></div><div class="line">ICON_MAIL=<span class="string">"[新邮件!]"</span></div><div class="line">COLOR_SET=<span class="string">"#[fg=red bg=white bold]"</span></div><div class="line">COLOR_RESTORE=<span class="string">"#[fg=<span class="variable">$BYOBU_LIGHT</span> bg=<span class="variable">$BYOBU_DARK</span>]"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="string">"`ls <span class="variable">$MAILDIR</span>/new`"</span> = <span class="string">""</span> ] ; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$COLOR_SET</span>"</span><span class="string">"<span class="variable">$ICON_MAIL</span>"</span><span class="string">"<span class="variable">$COLOR_RESTORE</span>"</span></div><div class="line">	<span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$LOCK</span> ]; <span class="keyword">then</span></div><div class="line">		cp <span class="variable">$LOCKFILE</span> <span class="variable">$LOCK</span></div><div class="line">		notify-send -i <span class="variable">$MSGICON</span> <span class="string">"新邮件"</span> <span class="variable">$ICON_MAIL</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	rm <span class="_">-f</span> <span class="variable">$LOCK</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> /home/<span class="variable">$USER</span>/Mail/rss/</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="keyword">if</span> [ ! <span class="string">"`ls <span class="variable">$i</span>/new`"</span> = <span class="string">""</span> ] ; <span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"<span class="variable">$COLOR_SET</span>"</span><span class="string">"[<span class="variable">$i</span>]"</span><span class="string">"<span class="variable">$COLOR_RESTORE</span>"</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After &lt;a href=&quot;../../../../2014/12/29/using-rssdrop-to-read-feeds-in-mutt/&quot;&gt;delivering all the feeds to Maildirs by rssdrop&lt;/a&gt;, I also need a notification daemon in my byobu shell.&lt;/p&gt;
&lt;p&gt;Byobu supports custom script and display the outputs in the bottom bar. And particularly, you can &lt;a href=&quot;../../../../2014/11/11/show-colors-in-byobu-control-bar/&quot;&gt;use colors in byobu script’s output&lt;/a&gt;!&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="byobu" scheme="http://jingbei.li/tags/byobu/"/>
    
      <category term="rssdrop" scheme="http://jingbei.li/tags/rssdrop/"/>
    
      <category term="script" scheme="http://jingbei.li/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>Using rssdrop to receive and read feeds in Mutt</title>
    <link href="http://jingbei.li/2014/12/29/using-rssdrop-to-read-feeds-in-mutt/"/>
    <id>http://jingbei.li/2014/12/29/using-rssdrop-to-read-feeds-in-mutt/</id>
    <published>2014-12-29T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rssdrop"><a href="#rssdrop" class="headerlink" title="rssdrop"></a>rssdrop</h3><p>rssdrop is a perl script to deliver feeds to Maildirs. The <a href="http://search.cpan.org/~acg/rssdrop/" target="_blank" rel="external">origin script</a> is out of date and very buggy. So I create a <a href="https://github.com/petronny/rssdrop" target="_blank" rel="external">fork</a> and fixed lots of problems.</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p>The dependencies are <code>perl-xml-simple</code>, <code>perl-date-manip</code> and <code>perl-lwp-protocol-https</code>.</p>
<a id="more"></a>
<p>If you have solved the dependencies, clone my fork and rssdrop just works:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/petronny/rssdrop</div></pre></td></tr></table></figure>
<p>If you are using Archlinux, just install the <code>rssdrop</code> package from AUR.</p>
<h4 id="Getting-start"><a href="#Getting-start" class="headerlink" title="Getting start"></a>Getting start</h4><h5 id="Initialize-rssdrop"><a href="#Initialize-rssdrop" class="headerlink" title="Initialize rssdrop"></a>Initialize rssdrop</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rssdrop --mailfolder path/to/mailfolder</div></pre></td></tr></table></figure>
<h5 id="Subscribe-to-a-new-feed"><a href="#Subscribe-to-a-new-feed" class="headerlink" title="Subscribe to a new feed"></a>Subscribe to a new feed</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rssdrop <span class="_">-a</span> archlinux https://www.archlinux.org/feeds/news/</div></pre></td></tr></table></figure>
<h5 id="Fetch-items-in-your-new-feed"><a href="#Fetch-items-in-your-new-feed" class="headerlink" title="Fetch items in your new feed"></a>Fetch items in your new feed</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rssdrop archlinux</div></pre></td></tr></table></figure>
<h5 id="Unsubscribe"><a href="#Unsubscribe" class="headerlink" title="Unsubscribe"></a>Unsubscribe</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rssdrop <span class="_">-d</span> archlinux</div></pre></td></tr></table></figure>
<h5 id="Fetch-all-new-items-in-all-feeds"><a href="#Fetch-all-new-items-in-all-feeds" class="headerlink" title="Fetch all new items in all feeds"></a>Fetch all new items in all feeds</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rssdrop</div></pre></td></tr></table></figure>
<h3 id="Mutt"><a href="#Mutt" class="headerlink" title="Mutt"></a>Mutt</h3><p>This part is simple, you can navigate to your feeds maildir or add it to spoolfile in your <code>.muttrc</code>.</p>
<p>But almost all the feed contents are html files, mutt will show them in plain text as default.<br>It’s not quite human readable so you need a <code>html2txt</code> script to convert it.</p>
<h3 id="html2txt"><a href="#html2txt" class="headerlink" title="html2txt"></a>html2txt</h3><p>Refer to <a href="http://stromberg.dnsalias.org/~strombrg/mutt-html.html" target="_blank" rel="external">this blog</a>, <code>links</code> is a good choice because of its numbered links feature. I changed it to <code>elinks</code> for Chinese supporting. Make sure it’s executable, and on your <code>$PATH</code>.</p>
<p>Here is an example of <code>html2txt</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment"># for mutt to view html e-mails</span></div><div class="line"></div><div class="line">elinks -dump <span class="string">"file://<span class="variable">$@</span>"</span></div><div class="line"></div><div class="line"><span class="comment">#or</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#lynx -force_html -dump "$@"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#or</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#w3m -T text/html -F -dump "$@"</span></div></pre></td></tr></table></figure>
<p>You also need a <code>~/.mailcap</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># for mutt to view html e-mails</div><div class="line">text/html;html2txt %s; copiousoutput</div></pre></td></tr></table></figure>
<p>And configure the following options in your <code>~/.muttrc</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># for viewing html e-mails inside mutt.  See also .mailcap</div><div class="line">auto_view text/html</div><div class="line">alternative_order text/enriched text/plain text text/html</div></pre></td></tr></table></figure>
<p>Now you can read all the html mails in mutt, not only the feeds.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;rssdrop&quot;&gt;&lt;a href=&quot;#rssdrop&quot; class=&quot;headerlink&quot; title=&quot;rssdrop&quot;&gt;&lt;/a&gt;rssdrop&lt;/h3&gt;&lt;p&gt;rssdrop is a perl script to deliver feeds to Maildirs. The &lt;a href=&quot;http://search.cpan.org/~acg/rssdrop/&quot;&gt;origin script&lt;/a&gt; is out of date and very buggy. So I create a &lt;a href=&quot;https://github.com/petronny/rssdrop&quot;&gt;fork&lt;/a&gt; and fixed lots of problems.&lt;/p&gt;
&lt;h4 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h4&gt;&lt;p&gt;The dependencies are &lt;code&gt;perl-xml-simple&lt;/code&gt;, &lt;code&gt;perl-date-manip&lt;/code&gt; and &lt;code&gt;perl-lwp-protocol-https&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="rssdrop" scheme="http://jingbei.li/tags/rssdrop/"/>
    
      <category term="mutt" scheme="http://jingbei.li/tags/mutt/"/>
    
  </entry>
  
  <entry>
    <title>Auto convert the base64 code in Abook</title>
    <link href="http://jingbei.li/2014/12/17/auto-convert-the-base64-code-into-utf-8/"/>
    <id>http://jingbei.li/2014/12/17/auto-convert-the-base64-code-into-utf-8/</id>
    <published>2014-12-17T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://abook.sourceforge.net/" target="_blank" rel="external">Abook</a> is a text-based addressbook program designed to use with <a href="http://www.mutt.org/" target="_blank" rel="external">mutt</a> mail client.</p>
<p>There is a chapter about using abook with mutt in the <a href="https://wiki.archlinux.org/index.php/Mutt#Abook" target="_blank" rel="external">ArchWiki</a>.<br><a id="more"></a></p>
<p>If you want to use <strong>Abook</strong> instead of aliases, remove the aliases configuration in <code>.muttrc</code> and add this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set query_command= &quot;abook --mutt-query &apos;%s&apos;&quot;</div><div class="line">macro index,pager  a &quot;&lt;pipe-message&gt;abook --add-email-quiet&lt;return&gt;&quot; &quot;Add this sender to Abook&quot;</div><div class="line">bind editor        &lt;Tab&gt; complete-query</div></pre></td></tr></table></figure>
<p>But sadly, the command <code>abook --add-email-quiet</code> always gets names like “=?utf-8?B?55m+5ZCI5LuZ5a2Q?=” which is base64 encoded.</p>
<p>To convert the base64 string and automatically fit the correct encoding, you can use a shell function:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">conv</span></span>() &#123;</div><div class="line">	<span class="built_in">eval</span> `<span class="built_in">echo</span> <span class="variable">$1</span> | awk -F <span class="string">'?'</span> <span class="string">'&#123; print "echo " $4 " | base64 -d | iconv -f " $2 &#125;'</span>`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Then:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ conv name==?utf-8?B?55m+5ZCI5LuZ5a2Q?=</div></pre></td></tr></table></figure>
<p>Or a python script like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> email</div><div class="line"><span class="keyword">import</span> email.header</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abookdecode</span><span class="params">(origin_name)</span>:</span></div><div class="line">    name=email.Header.decode_header(origin_name)</div><div class="line">	<span class="keyword">if</span> name[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">	    <span class="keyword">return</span> name[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">	    <span class="keyword">return</span> name[<span class="number">0</span>][<span class="number">0</span>].decode(name[<span class="number">0</span>][<span class="number">1</span>]).encode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">'__main__'</span>==__name__:</div><div class="line">	infile=open(sys.argv[<span class="number">1</span>],<span class="string">"r"</span>)</div><div class="line">    content=infile.readlines()</div><div class="line">    infile.close()</div><div class="line">    outfile=open(sys.argv[<span class="number">1</span>],<span class="string">"wb"</span>)</div><div class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> content:</div><div class="line">	<span class="keyword">if</span> line[<span class="number">0</span>:<span class="number">4</span>]==<span class="string">'name'</span>:</div><div class="line">	    outfile.write(line[<span class="number">0</span>:<span class="number">5</span>]+abookdecode(line[<span class="number">5</span>:<span class="number">-1</span>])+<span class="string">'\n'</span>)</div><div class="line">	    <span class="keyword">else</span>:</div><div class="line">		outfile.write(line)</div><div class="line">    outfile.close()</div></pre></td></tr></table></figure>
<p>And then change your <code>.muttrc</code> to call the script:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">macro index,pager  a &quot;&lt;pipe-message&gt;abook --add-email-quiet &amp;&amp; abook-decode ~/.abook/addressbook&lt;return&gt;&quot; &quot;Add this sender to Abook&quot;</div></pre></td></tr></table></figure>
<p>Now the addressbook will be written correctly.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://abook.sourceforge.net/&quot;&gt;Abook&lt;/a&gt; is a text-based addressbook program designed to use with &lt;a href=&quot;http://www.mutt.org/&quot;&gt;mutt&lt;/a&gt; mail client.&lt;/p&gt;
&lt;p&gt;There is a chapter about using abook with mutt in the &lt;a href=&quot;https://wiki.archlinux.org/index.php/Mutt#Abook&quot;&gt;ArchWiki&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="script" scheme="http://jingbei.li/tags/script/"/>
    
      <category term="abook" scheme="http://jingbei.li/tags/abook/"/>
    
      <category term="mutt" scheme="http://jingbei.li/tags/mutt/"/>
    
      <category term="python" scheme="http://jingbei.li/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>A simple script to check your ruby library version</title>
    <link href="http://jingbei.li/2014/11/29/a-simple-script-to-check-your-ruby-version/"/>
    <id>http://jingbei.li/2014/11/29/a-simple-script-to-check-your-ruby-version/</id>
    <published>2014-11-29T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>Most ruby packages are not maintained by the Archlinux repository, I installed them locally then added <code>~/.gem/ruby/2.1.0/bin</code> to <code>$PATH</code>.</p>
<p>Although the ruby version is <code>2.1.5</code>, it uses <code>2.1.0</code> as the library version. It feels silly if I change it manually every time, so I have to find a way to check it automatically.<br><a id="more"></a><br>Refer to this <a href="http://forum.ubuntu.com.cn/viewtopic.php?f=48&amp;t=466400" target="_blank" rel="external">post</a>, the output of <code>ruby -e &#39;puts $LOAD_PATH&#39;</code> includes what I need.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/usr/lib/ruby/site_ruby/2.2.0</div><div class="line">/usr/lib/ruby/site_ruby/2.2.0/x86_64-linux</div><div class="line">/usr/lib/ruby/site_ruby</div><div class="line">/usr/lib/ruby/vendor_ruby/2.2.0</div><div class="line">/usr/lib/ruby/vendor_ruby/2.2.0/x86_64-linux</div><div class="line">/usr/lib/ruby/vendor_ruby</div><div class="line">/usr/lib/ruby/2.2.0</div><div class="line">/usr/lib/ruby/2.2.0/x86_64-linux</div></pre></td></tr></table></figure>
<p>Then use <code>sed</code> and <code>grep</code> to find it out.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">'puts $LOAD_PATH'</span> | sed <span class="string">"s/\/usr\/lib\/ruby\///g"</span> |grep <span class="string">'^[0-9\.]*$'</span></div></pre></td></tr></table></figure>
<p>Finally I added the following line to <code>.zshrc</code> and it works fine.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby_version=`ruby <span class="_">-e</span> <span class="string">'puts $LOAD_PATH'</span> | sed <span class="string">"s/\/usr\/lib\/ruby\///g"</span> |grep <span class="string">'^[0-9\.]*$'</span>`</div><div class="line">path=(<span class="variable">$path</span> ~/.gem/ruby/<span class="variable">$ruby_version</span>/bin)</div></pre></td></tr></table></figure>
<p>BTW, this script can also be used in the PKGBUILD of ruby gem packages.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Most ruby packages are not maintained by the Archlinux repository, I installed them locally then added &lt;code&gt;~/.gem/ruby/2.1.0/bin&lt;/code&gt; to &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although the ruby version is &lt;code&gt;2.1.5&lt;/code&gt;, it uses &lt;code&gt;2.1.0&lt;/code&gt; as the library version. It feels silly if I change it manually every time, so I have to find a way to check it automatically.&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="script" scheme="http://jingbei.li/tags/script/"/>
    
      <category term="ruby" scheme="http://jingbei.li/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>Showing colors in the Byobu custom scripts</title>
    <link href="http://jingbei.li/2014/11/11/show-colors-in-byobu-control-bar/"/>
    <id>http://jingbei.li/2014/11/11/show-colors-in-byobu-control-bar/</id>
    <published>2014-11-11T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p><a href="byobu.co">Byobu</a> is a frontend for screen or tmux.</p>
<p>But the custom script sample in the manual page does not working in tmux.<br><a id="more"></a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"\005&#123;= bw&#125;%s\005&#123;-&#125;\n"</span> <span class="string">"<span class="variable">$(uname -r)</span>"</span></div></pre></td></tr></table></figure>
<p>Actually, writing it in tmux’s way is ok.</p>
<p>Here is an example for showing the Wifi name with colors.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/sh -e</span></div><div class="line">COLOR_SET=<span class="string">"#[fg=white bg=blue bold]"</span></div><div class="line">COLOR_RESTORE=<span class="string">"#[fg=<span class="variable">$BYOBU_LIGHT</span> bg=<span class="variable">$BYOBU_DARK</span>]"</span></div><div class="line">out=`iwconfig <span class="variable">$MONITORED_NETWORK</span> 2&gt;/dev/null | awk <span class="string">'$0 ~ /[ ]*SSID/ &#123; sub(/.*[:]/,"",$4); printf("ssid=%s\n", $4); &#125;'</span>`</div><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$out</span>"</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$ssid</span>"</span> = <span class="string">"off/any"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"<span class="variable">$COLOR_SET</span>"</span><span class="string">"<span class="variable">$ssid</span>"</span><span class="string">"<span class="variable">$COLOR_RESTORE</span>"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;byobu.co&quot;&gt;Byobu&lt;/a&gt; is a frontend for screen or tmux.&lt;/p&gt;
&lt;p&gt;But the custom script sample in the manual page does not working in tmux.&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="byobu" scheme="http://jingbei.li/tags/byobu/"/>
    
      <category term="script" scheme="http://jingbei.li/tags/script/"/>
    
      <category term="tmux" scheme="http://jingbei.li/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Running QQDownload prefectly under linux</title>
    <link href="http://jingbei.li/2014/10/21/running-qqdownload-prefectly-under-linux/"/>
    <id>http://jingbei.li/2014/10/21/running-qqdownload-prefectly-under-linux/</id>
    <published>2014-10-21T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://xf.qq.com/index.html" target="_blank" rel="external">QQDownload</a>(QQ旋风, which means “QQ tornado”) is a download manager and bittorrent client developed by Tencent Holdings Ltd.</p>
<p>Comparing with its main competitor, Xunlei, QQDownload is more easier to handle by wine.</p>
<a id="more"></a>
<p>Here is a tutorial for running QQDownload 4.8 Beta using wine:</p>
<ol>
<li><p>Create a new 32-bit wineprefix</p>
<p> export WINEARCH=win32<br> export WINEPREFIX=somewhere winetricks</p>
</li>
<li><p>If wine ask you to install <code>gecko</code> and <code>mono</code> plugins, permit it.</p>
</li>
<li>Install <code>windowscodecs</code> to your wineprefix using <code>winetricks</code> GUI.</li>
<li>Then install <code>riched20</code>, <code>riched30</code> and <code>wininet</code> to your wineprefix using <code>winetricks</code> GUI.</li>
<li>Finally you need a Chinese font for all charactors. The <code>fakeChinese</code> in <code>winetricks</code> is a good choice.</li>
<li>Have fun! You may need a desktop launcher.</li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>if you have permission to use the <a href="http://lixian.qq.com/login.html" target="_blank" rel="external">Tencent offline downloading</a>,<br>such as VIP account or gained LV8 in QQDownload, I recommend you to try out another python script, <a href="https://github.com/kikyous/xfdown" target="_blank" rel="external">xfdown</a>.</p>
<p>Xfdown now has a awesome Tui with color support, wow.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://xf.qq.com/index.html&quot;&gt;QQDownload&lt;/a&gt;(QQ旋风, which means “QQ tornado”) is a download manager and bittorrent client developed by Tencent Holdings Ltd.&lt;/p&gt;
&lt;p&gt;Comparing with its main competitor, Xunlei, QQDownload is more easier to handle by wine.&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jingbei.li/tags/linux/"/>
    
      <category term="wine" scheme="http://jingbei.li/tags/wine/"/>
    
  </entry>
  
  <entry>
    <title>Using gtest and gcov in cocos2dx</title>
    <link href="http://jingbei.li/2013/12/14/Using-gtest-and-gcov-in-cocos2dx/"/>
    <id>http://jingbei.li/2013/12/14/Using-gtest-and-gcov-in-cocos2dx/</id>
    <published>2013-12-14T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<p>狂调半宿代码，深感与硬件打交道坑爹之处．<br>现暂记几处，以免后人入坑．</p>
<h3 id="cocos2dx的libtiff-a的main函数重定义"><a href="#cocos2dx的libtiff-a的main函数重定义" class="headerlink" title="cocos2dx的libtiff.a的main函数重定义"></a>cocos2dx的libtiff.a的main函数重定义</h3><p>这样自己写的c文件都不能有main函数，gtest和gcov都不能用了.<br><a href="http://blog.linguofeng.com/archive/2013/04/17/cocos2d-x-ndkgdb.html" target="_blank" rel="external">参见此贴</a><br>后简直雪中送炭．</p>
<p>现把我在自己的项目中的做法记下来：<br><a id="more"></a></p>
<ul>
<li>切换到UnitTest分支</li>
<li>做git下的proj.android/exteral到cocos2dx/sebomber/proj.android/exteral的软连接</li>
<li>用git下的libtiff.a替换 cocos2d-x-2.1.5/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi/libtiff.a</li>
</ul>
<h4 id="在jni-main3-cpp内做gtest单元测试"><a href="#在jni-main3-cpp内做gtest单元测试" class="headerlink" title="在jni/main3.cpp内做gtest单元测试"></a>在jni/main3.cpp内做gtest单元测试</h4><p>编译使用原来的编译方式</p>
<p>运行方式</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adb push cocos2d-x-2.1.5/sebomber/proj.android/libs/armeabi/libgame /data/</div><div class="line">adb shell</div><div class="line"><span class="built_in">export</span> GCOV_PREFIX=/sdcard/mycov</div><div class="line"><span class="built_in">cd</span> /data</div><div class="line">./libgame</div></pre></td></tr></table></figure>
<ul>
<li>运行结束后，生成的GCOV用的文件在/sdcard/mycov里</li>
</ul>
<h5 id="获取GCOV文件到home"><a href="#获取GCOV文件到home" class="headerlink" title="获取GCOV文件到home"></a>获取GCOV文件到home</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/mycov ~</div></pre></td></tr></table></figure>
<p>将cocos2d-x-2.1.5/sebomber/proj.android/obj里面的.gcno文件<br>从手机里得到的.gcda, 和对应的.cpp文件放在一起<br>运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android-ndk/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcov -b *.cpp</div></pre></td></tr></table></figure>
<p>即可得到覆盖率报告及生成的报告文件</p>
<p>其中，libtiff.a是要自己重编译的．里面的libgtest也要重编译．</p>
<h3 id="gtest与cocos2dx冲突的问题"><a href="#gtest与cocos2dx冲突的问题" class="headerlink" title="gtest与cocos2dx冲突的问题"></a>gtest与cocos2dx冲突的问题</h3><p>感谢<a href="https://github.com/sfuku7/googletest_android_ndk-build" target="_blank" rel="external">github.com/sfuku7/googletest_android_ndk-build</a><br>给出了详尽的使用方式．</p>
<p>不过里面自带的那个libgtest是不能直接用的．<br>由于cocos2dx在编译时使用了frtti优化，我在写cocos2dx项目的单元测试文件时要么gtest不能用，要么cocos2dx不能用．<br>蛋疼了好几个小时，饭都没吃．最后想到把libgtest也开启frtti重编译一下就应该兼容了．</p>
<p>还是按照上面那个链接里面给出的googletest的编译方式<br>额外在googletest的jni/Application.mk中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APP_CPPFLAGS := -frtti</div></pre></td></tr></table></figure>
<p>然后做一个新的libgtest.</p>
<p>放到那个项目的sample/test_project/external下对应的地方测试能用．</p>
<p>按照sample/test_project/下的目录结构复制到cocos2dx的proj.android下，终于成功了．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;狂调半宿代码，深感与硬件打交道坑爹之处．&lt;br&gt;现暂记几处，以免后人入坑．&lt;/p&gt;
&lt;h3 id=&quot;cocos2dx的libtiff-a的main函数重定义&quot;&gt;&lt;a href=&quot;#cocos2dx的libtiff-a的main函数重定义&quot; class=&quot;headerlink&quot; title=&quot;cocos2dx的libtiff.a的main函数重定义&quot;&gt;&lt;/a&gt;cocos2dx的libtiff.a的main函数重定义&lt;/h3&gt;&lt;p&gt;这样自己写的c文件都不能有main函数，gtest和gcov都不能用了.&lt;br&gt;&lt;a href=&quot;http://blog.linguofeng.com/archive/2013/04/17/cocos2d-x-ndkgdb.html&quot;&gt;参见此贴&lt;/a&gt;&lt;br&gt;后简直雪中送炭．&lt;/p&gt;
&lt;p&gt;现把我在自己的项目中的做法记下来：&lt;br&gt;
    
    </summary>
    
    
      <category term="gtest" scheme="http://jingbei.li/tags/gtest/"/>
    
      <category term="android" scheme="http://jingbei.li/tags/android/"/>
    
      <category term="cocos2dx" scheme="http://jingbei.li/tags/cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>Using astyle to format C/C++ codes</title>
    <link href="http://jingbei.li/2013/12/14/using-astyle-to-format-cc-codes/"/>
    <id>http://jingbei.li/2013/12/14/using-astyle-to-format-cc-codes/</id>
    <published>2013-12-14T00:00:00.000Z</published>
    <updated>2016-12-23T15:58:52.316Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">astyle *.hpp -A7tCSKNLwYFpPHxdk2W2yej</div></pre></td></tr></table></figure>
<p>Here is a preview.<br><a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __Hero_Bazzi__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __Hero_Bazzi__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HeroClass.hpp"</span></span></div><div class="line">USING_NS_CC;</div><div class="line"><span class="keyword">class</span> HeroBazzi: <span class="keyword">public</span> Hero&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createhero</span><span class="params">(CCPoint a,<span class="keyword">float</span> scale,<span class="keyword">int</span> id,<span class="keyword">int</span> type)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> HeroBazzi::createhero(CCPoint a,<span class="keyword">float</span> scale,<span class="keyword">int</span> id,<span class="keyword">int</span> type)</div><div class="line">&#123;</div><div class="line">	speed = <span class="number">5</span>;</div><div class="line">	direction = <span class="number">5</span>;</div><div class="line">	bubble_range = <span class="number">3</span>;</div><div class="line">	bubble_num = <span class="number">3</span>;</div><div class="line">	sca = scale;</div><div class="line">	idx = id;</div><div class="line">	islive = <span class="literal">true</span>;</div><div class="line">	isfree = <span class="literal">true</span>;</div><div class="line">	sprite = CCSprite::create();</div><div class="line">	sprite-&gt;setScale(scale);</div><div class="line">	sprite-&gt;setPosition(a);</div><div class="line">	<span class="keyword">if</span> (type == <span class="number">0</span>)</div><div class="line">		AniReader::read(<span class="string">"unit_bazzi.ani"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		AniReader::read(<span class="string">"unit_luxbazzi.ani"</span>);</div><div class="line">	num = AniReader::num;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">list</span>[i][j] = AniReader::<span class="built_in">list</span>[i][j];</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">if</span>  (type == <span class="number">0</span>)</div><div class="line">		texture = CCTextureCache::sharedTextureCache()-&gt;addImage(<span class="string">"image/unit/unit_bazzi.png"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		texture = CCTextureCache::sharedTextureCache()-&gt;addImage(<span class="string">"image/unit/unit_luxbazzi.png"</span>);</div><div class="line">	animate = CCRepeatForever::create(CCAnimate::create(moveanimation(<span class="number">4</span>)));</div><div class="line">	sprite-&gt;runAction(animate);</div><div class="line">	action=<span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;astyle *.hpp -A7tCSKNLwYFpPHxdk2W2yej&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Here is a preview.&lt;br&gt;
    
    </summary>
    
    
      <category term="astyle" scheme="http://jingbei.li/tags/astyle/"/>
    
      <category term="c++" scheme="http://jingbei.li/tags/c/"/>
    
  </entry>
  
</feed>
